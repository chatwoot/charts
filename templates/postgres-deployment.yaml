{{- if .Values.volumes.postgres.local }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  creationTimestamp: null
  labels:
    {{- include "postgres.labels" . | nindent 4}}
spec:
  replicas: {{ int .Values.deployment.image.dockerHub.database.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgres.labels" . | nindent 6}}
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        {{- include "postgres.labels" . | nindent 8}}
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: env
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PASSWORD
                  name: env
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_USERNAME
                  name: env
          image: "{{ .Values.deployment.image.dockerHub.database.repository }}:{{ .Values.deployment.image.dockerHub.database.tag }}"
          name: postgres
          ports:
            - containerPort: {{ int .Values.deployment.image.dockerHub.database.port }}
          resources: {}
        {{- if .Values.volumes.postgres.local }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-claim0
        {{- end }}
          imagePullPolicy: {{ .Values.deployment.image.imagePullPolicy }}
        {{- if .Values.volumes.postgres.local }}
      volumes:
        - name: postgres-claim0
          persistentVolumeClaim:
            claimName: postgres-claim0
        {{- end }}
status: {}
{{- end }}